package com.example.photogallery;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import android.R.string;
import android.net.Uri;
import android.nfc.Tag;
import android.os.AsyncTask;
import android.text.StaticLayout;
import android.util.Log;

public class FlickFetchr {
	//private static final String TAG="PhotoGalleryGragment";
	public static final String TAG="FlickrFetchr";
	private static final String ENDPOINT="http://api.flickr.com/services/rest/";
	private static final String API_KEY="";
	private static final String METHOD_GET_RESENT="flickr.photos.getRecent";
	private static final String PARAM_EXTRAS="extras";
	private static final String EXTRA_SMALL_URL="url_s";
	
	private static final String XML_PHOTO="photo";
	/*此方法获取数据
	 * 
	 */
	byte[] getUrlBytes(String urlSpec) throws IOException{
		URL url=new URL(urlSpec);
		/*HttpURLConnection对象虽然提供了一个连接，只有在调用getInputStream()方法是时才会真正的连接到
		 * 指定的URL地址，在此之前我们无法获取有效的返回码
		 * 
		 * 创建URL并打开了网络连接，循环调用read（）方法读取网络连接到的数据
		 */
		HttpURLConnection connection=(HttpURLConnection)url.openConnection();
		try {
			ByteArrayOutputStream out=new ByteArrayOutputStream();
			InputStream in=connection.getInputStream();
			if (connection.getResponseCode()!=HttpURLConnection.HTTP_OK) {
				return null;
			}
			
			int bytesRead=0;
			byte[] buffer=new byte[1024];
			while((bytesRead=in.read(buffer))>0){
				out.write(buffer,0,bytesRead);
			}
			out.close();
			return out.toByteArray();
		} finally{
			connection.disconnect();
		}
	}
	
	public String getUrl(String urlSpec) throws IOException {
		return new String(getUrlBytes(urlSpec));
	}
	
	/*
	 * 获取所需内容
	 */
	public void fetchItems(){
		try {
			/*
			 * 使用Uri.Builder构建完整的Flickr API请求URL
			 */
			String url=Uri.parse(ENDPOINT).buildUpon().appendQueryParameter("method", METHOD_GET_RESENT)
					.appendQueryParameter("api_key", API_KEY)
					.appendQueryParameter(PARAM_EXTRAS, EXTRA_SMALL_URL)
					.build().toString();
			String xmlString=getUrl(url);
			Log.i(TAG, "Received xml : "+xmlString);
		} catch (IOException e) {
			// TODO: handle exception
			Log.e(TAG, "Filed to fetch items ",e);
		}
	}
	
	/*
	 * 解析图片
	 */
	void parseItems(ArrayList<GalleryItem> items,XmlPullParser parser)
			throws XmlPullParserException,IOException{
		int eventType=parser.next();
		
		while(eventType!=XmlPullParser.END_DOCUMENT){
			if(eventType == XmlPullParser.START_TAG && 
					XML_PHOTO.e
		}
	}
}
