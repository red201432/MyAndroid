package com.example.criminalintent;


import java.io.IOException;
import java.util.List;
import java.util.UUID;

import android.hardware.Camera;
import android.hardware.Camera.Size;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.FileProvider;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

public class CrimeCameraFragment extends Fragment {
	private static final String TAG="CrimeCameraFragment";
	
	private View mProgressContainer;
	private Camera mCamera;
	private SurfaceView mSurfaceView;
	
	private Camera.ShutterCallback mShutterCallback=new Camera.ShutterCallback() {
		
		@Override
		public void onShutter() {
			// TODO Auto-generated method stub
			mProgressContainer.setVisibility(View.VISIBLE);
		}
	};
	
	private Camera.PictureCallback mJpegCallback=new Camera.PictureCallback() {
		
		@Override
		public void onPictureTaken(byte[] data, Camera camera) {
			// TODO Auto-generated method stub
			String filename=UUID.randomUUID().toString()+".jpg";
		}
	};
	
	@Override
	public View onCreateView(LayoutInflater inflater,ViewGroup parent,
			Bundle savedInstanceState){
		View v=inflater.inflate(R.layout.fragment_crime_camera, parent,false);
		
		mProgressContainer=v.findViewById(R.id.crime_camera_progressContainer);
		mProgressContainer.setVisibility(View.INVISIBLE);
		
		Button takePictureButton=(Button)v.findViewById(R.id.crime_camera_takePictureButton);
		takePictureButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				getActivity().finish();
			}
		});
		
		mSurfaceView=(SurfaceView)v.findViewById(R.id.crime_camera_surfaceView);
		
		//获取SurfaceHolder实例
		SurfaceHolder holder=mSurfaceView.getHolder();
		holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		
		//实现SurfaceHolder.Callback接口
		
		holder.addCallback(new SurfaceHolder.Callback() {
			
			@Override
			public void surfaceDestroyed(SurfaceHolder holder) {
				// TODO Auto-generated method stub
				if(mCamera!=null)
					mCamera.stopPreview();
			}
			
			@Override
			public void surfaceCreated(SurfaceHolder holder) {
				// TODO Auto-generated method stub
				try{
					if(mCamera!=null)
						mCamera.setPreviewDisplay(holder);
				} catch (IOException e){
					Log.e(TAG, "Error setting up preview display",e);
				}
			}
			
			@Override
			public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
				// TODO Auto-generated method stub
				if(mCamera==null) return;
				
				Camera.Parameters parameters=mCamera.getParameters();
				//Size s=null;
				Size s=getBestSupportSize(parameters.getSupportedPreviewSizes(), width, height);
				parameters.setPreviewSize(s.width, s.height);
				mCamera.setParameters(parameters);
				try{
					mCamera.startPreview();
				}catch(Exception e){
					Log.e(TAG, "Could not start preview",e);
					mCamera.release();
					mCamera=null;
				}
			}
		});
		return v;
	}
	@Override
	public void onResume(){
		super.onResume();
		if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.GINGERBREAD){
			mCamera=Camera.open(0);
		}else{
			mCamera=Camera.open();
		}
	}
	@Override
	public void onPause(){
		super.onPause();
		if(mCamera!=null){
			mCamera.release();
			mCamera=null;
		}
	}
	
	private Size getBestSupportSize(List<Size> sizes,int width,int height){
		Size bestSize=sizes.get(0);
		int largestArea=bestSize.width*bestSize.height;
		for(Size s :sizes){
			int area=s.width*s.height;
			if(area>largestArea){
				bestSize=s;
				largestArea=area;
			}
		}
		return bestSize;
	}
}
